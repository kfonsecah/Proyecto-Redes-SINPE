generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SINPE")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model accounts {
  id                                            Int             @id @default(autoincrement())
  number                                        String          @unique @db.VarChar(30)
  currency                                      String          @db.VarChar(3)
  balance                                       Decimal         @default(0) @db.Decimal(15, 2)
  created_at                                    DateTime?       @default(now()) @db.Timestamp(6)
  currencies                                    currencies      @relation(fields: [currency], references: [code], onDelete: NoAction, onUpdate: NoAction)
  subscriptions                                 subscriptions[]
  transfers_transfers_from_account_idToaccounts transfers[]     @relation("transfers_from_account_idToaccounts")
  transfers_transfers_to_account_idToaccounts   transfers[]     @relation("transfers_to_account_idToaccounts")
  user_accounts                                 user_accounts[]

  phone_links phone_links[]
}

model logs {
  id         Int       @id @default(autoincrement())
  event      String
  details    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subscriptions {
  id         Int       @id @default(autoincrement())
  user_id    Int
  account_id Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  accounts   accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, account_id])
  @@index([user_id], map: "idx_subscriptions_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transfers {
  id                                           Int        @id @default(autoincrement())
  from_account_id                              Int
  to_account_id                                Int
  amount                                       Decimal    @db.Decimal(15, 2)
  currency                                     String     @db.VarChar(3)
  status                                       String?    @default("pending") @db.VarChar(20)
  description                                  String?    @db.VarChar(20)
  created_at                                   DateTime?  @default(now()) @db.Timestamp(6)
  currencies                                   currencies @relation(fields: [currency], references: [code], onDelete: NoAction, onUpdate: NoAction)
  accounts_transfers_from_account_idToaccounts accounts   @relation("transfers_from_account_idToaccounts", fields: [from_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  accounts_transfers_to_account_idToaccounts   accounts   @relation("transfers_to_account_idToaccounts", fields: [to_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([from_account_id, to_account_id], map: "idx_transfers_from_to")
}

model users {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  email         String          @unique @db.VarChar(100)
  phone         String          @db.VarChar(15)
  password_hash String
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  subscriptions subscriptions[]
  user_accounts user_accounts[]
}

model currencies {
  code      String      @id @db.VarChar(3)
  name      String?     @db.VarChar(50)
  accounts  accounts[]
  transfers transfers[]
}

model user_accounts {
  id         Int      @id @default(autoincrement())
  user_id    Int
  account_id Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, account_id])
  @@index([account_id], map: "idx_user_accounts_account")
  @@index([user_id], map: "idx_user_accounts_user")
}

model phone_links {
  id             Int      @id @default(autoincrement())
  account_number String   @unique @db.VarChar(30)
  phone          String   @unique @db.VarChar(15)
  created_at     DateTime @default(now()) @db.Timestamp(6)

  account accounts @relation(fields: [account_number], references: [number], onDelete: Cascade)

  @@index([phone], map: "idx_phone_links_phone")
  @@map("phone_links")
}
